1.数据完整性
    主键
    唯一确定一条记录（一个实体）的字段
    逻辑主键：  除了唯一标识一条记录外，没有别的意义。一般取名表明加ID或_ID。例如：studentid或student_id（建议）
    业务主键：  除了具备逻辑主键的特性，还具有一定的业务意义。

*****************************创建主键表的三种方式************************
   创建带主键的表(关键字primary)
 一 . create table name(
	id int primary key,      //id为主键不能为null且唯一
	name varchar(100)        );
mysql> desc t1;
    +-------+--------------+------+-----+---------+-------+
    | Field | Type         | Null | Key | Default | Extra |
    +-------+--------------+------+-----+---------+-------+
    | id    | int(11)      | NO   | PRI | NULL    |       |
    | name  | varchar(100) | YES  |     | NULL    |       |
    +-------+--------------+------+-----+---------+-------+
二 .
create table t2(
	id int ,
	name varchar(100),
	primary key(id,name),///id-name组合主键
);
mysql> desc t2;
    +-------+--------------+------+-----+---------+-------+
    | Field | Type         | Null | Key | Default | Extra |
    +-------+--------------+------+-----+---------+-------+
    | id    | int(11)      | NO   | PRI | 0       |       |
    | name  | varchar(100) | NO   | PRI |         |       |
    +-------+--------------+------+-----+---------+-------+
三 .
  create table t3(id int , name varchar(100));
  alter table t3 add primary key(id,name); //(也可使用联合主键)
mysql> desc t3;
    +-------+--------------+------+-----+---------+-------+
    | Field | Type         | Null | Key | Default | Extra |
    +-------+--------------+------+-----+---------+-------+
    | id    | int(11)      | NO   | PRI | 0       |       |
    | name  | varchar(100) | NO   | PRI |         |       |
    +-------+--------------+------+-----+---------+-------+
四 .
  create table name(){
  id int key auto_increment//自增长主键(auto_increment为MySql独有),
  ,name VARCHAR(100) }
*****************************创建主键表的三种方式************************


***********************列约束*********************************
*A.JavaBean                                                 *
*       javabean中变量 int id; 和 Integer id;的区别           *
*       Integer 使用包装类 可以为null 否则出现id重复修改数据     *
* B.约束                                                     *
*  create table T5(                                         *
* 	ID int primary key auto_increment,                      *
* 	name varchar(100) not null unique,                      *
* 	gebnder  char(1) not null,  //(非空约束限定)              *
* 	phone	 varchar(11) unique //(唯一约束)                 *
*  );                                                       *
***********************列约束*********************************


*******************************主表-从表主键:外键(一主表多从表)***************************************
*  主表中的主键被从表中的一个字段引用,在从表中,该字段被称为外键
*  AAA 创建主表
  mysql>  create table customer(
    id int primary key,           //主表主键
    name varchar(100) not null,
    address varchar(100) not null,
    type varchar(100)
    );
*  BBB 创建从表 (constraint约束)
*  mysql>   create table orders(
    id int primary key,    //从表主键
    amount int,
    price float,
    code varchar(100),
    customer_id int,        //从表外键
    constraint FK_CUSTOMERID foreign key(customer_id) references customer(id)   //建立外键关系
    );
*  mysql> desc branchzsy;
    +---------+--------------+------+-----+---------+-------+
    | Field   | Type         | Null | Key | Default | Extra |
    +---------+--------------+------+-----+---------+-------+
    | id      | int(11)      | NO   | PRI | NULL    |       |
    | name    | varchar(100) | YES  |     | NULL    |       |
    | number  | float        | YES  |     | NULL    |       |
    | main_id | int(11)      | YES  | MUL | NULL    |       |     MUL代表外键关联其他表主键
    +---------+--------------+------+-----+---------+-------+
*******************************主表-从表主键:外键(一主表多从表)***************************************


****************************使用联合主键(多表对多表)********************************
* teacher表一
*  create table teachers(
    id int primary key,
	name varchar(100) not null,
	salary float(7,2)
  );
* student表二
  create table students(
	id int primary key,
	classname varchar(100) not null,
	name varchar(100) not null
  );
* 主从表关系表三
  create table teacher_student_ref(
  teacher_id int,
  student_id int,
  primary key(teacher_id,student_id),
  constraint FK_TEACHERID foreign key(teacher_id) references teachers(id),
  constraint FK_STUDENTID foreign key(student_id) references students(id)
  );
*  mysql> desc teacher_student_ref
      -> ;
  +------------+---------+------+-----+---------+-------+
  | Field      | Type    | Null | Key | Default | Extra |
  +------------+---------+------+-----+---------+-------+
  | teacher_id | int(11) | NO   | PRI | 0       |       |
  | student_id | int(11) | NO   | PRI | 0       |       |
  +------------+---------+------+-----+---------+-------+
****************************使用联合主键(多表对多表)**********************************


====================交叉连接 cross join ==========================
=                                                               =
=  a.交叉连接 cross join  返回两张表的笛卡尔积(两个表集合的积)       =
=  select * from teachers,students;           //隐式连接         =
=  select * from teachers cross join students;//显式连接连接     =
=  mysql> select * from teachers, students;                     =
=  +----+------+--------+----+-----------+------+               =
=  | id | name | number | id | classname | name |               =
=  +----+------+--------+----+-----------+------+               =
=  |  1 | t1   | 111.00 |  1 | class1    | s1   |               =
=  |  2 | t2   | 222.00 |  1 | class1    | s1   |               =
=  |  1 | t1   | 111.00 |  2 | class2    | s2   |               =
=  |  2 | t2   | 222.00 |  2 | class2    | s2   |               =
=  +----+------+--------+----+-----------+------+               =
=                                                               =
====================交叉连接 cross join ==========================
  source 路径 (导入数据库文件)
  //

========================内连接 inner join * on======================================
=   //隐式内连接                                                                    =
=   select * from teachers,students where teachers.id = students.id;               =
=   select * from teachers c,students where c.id = students.id;   //使用别名的变量值 =
=  //显式内连接                                                                     =
=   select * from teachers c inner join students on c.id = students.id;            =
=  +----+------+--------+----+-----------+------+                                  =
=  | id | name | number | id | classname | name |                                  =
=  +----+------+--------+----+-----------+------+                                  =
=  |  1 | t1   | 111.00 |  1 | class1    | s1   |                                  =
=  |  2 | t2   | 222.00 |  2 | class2    | s2   |                                  =
=  +----+------+--------+----+-----------+------+                                  =
========================内连接 inner join * on=======================================


=============================c.外链接=============================================
=                                                                               =
=  //不仅返回符合条件的数据,还会根据左外联或右外联,返回对应表的其他数据                 =
=  左外链接(返回左表的所有数据)                                                    =
=  select * from teachers c left outer join students on c.id = students.id;     =
= +----+------+--------+----+-----------+------+                                =
= | id | name | number | id | classname | name |                                =
= +----+------+--------+----+-----------+------+                                =
= |  1 | t1   | 111.00 |  1 | class1    | s1   |                                =
= |  2 | t2   | 222.00 |  2 | class2    | s2   |                                =
= +----+------+--------+----+-----------+------+                                =
=  select * from students left outer join teachers c on c.id = students.id;     =
= +----+-----------+------+------+------+--------+                              =
= | id | classname | name | id   | name | number |                              =
= +----+-----------+------+------+------+--------+                              =
= |  1 | class1    | s1   |    1 | t1   | 111.00 |                              =
= |  2 | class2    | s2   |    2 | t2   | 222.00 |                              =
= |  3 | class3    | s3   | NULL | NULL | NULL   |                              =
=  右外链接(返回右表所有行)                                                        =
=  select * from customer c right outer join orders on c.id = customer_id;      =
=                                                                               =
=================================================================================

...................................................................................................
.  子查询                                                                                          .
. 先执行子查询,再执行外查询                                                                           .
.  1.select id 别名 from customer where name='马化腾';                                              .
.  2.select * from orders where customer_id = (select id from customer where name='马化腾');        .
.  3.select * from customer where id in (select customer_id from orders where price > 100);        .
.  4.select name 别名 from customer where id in (select customer_id from orders where price > 100); .
....................................................................................................


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&聚合函数&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&  //查询行数                                                              &
&  select count(*) from student;                                          &
&  //查询某些列和之值作为一列                                                &
&  select name,chinese+math+english as total from student;                &
&  //使用聚合函数条件查询                                                    &
&  select count(*) from student where chinese+math+english > 300;         &
&  //求和                                                                  &
&  select sum(id) from student;                                           &
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&聚合函数&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>分组查询 (group by 按条件算一组) having 后可以用聚合函数 >>>>>>>>>>>>>>>>
>mysql> select * from students group by classname;                                               >
> +----+-----------+------+                                                                      >
> | id | classname | name |                                                                      >
> +----+-----------+------+                                                                      >
> |  1 | class1    | s1   |                                                                      >
> |  2 | class2    | s2   |                                                                      >
> |  3 | class3    | s3   |                                                                      >
> +----+-----------+------+                                                                      >
>  select product_name, sum(price) from product;                         //使用聚合函数            >
>                                                                                                >
>  select product_name, sum(price) from product group by product_name;   //某相同列名算一列        >
>  //having可以使用聚合函数(where不可用)                                                            >
>  select product_name from product group by product_name having sum(price) > 100;               >
>                                                                                                >
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>分组查询  (group by 按条件算一组) having 后可以用聚合函数>>>>>>>>>>>>>>>>



======================其他函数================================
  mysql> select addtime('11:15:00','01:01:01');   //时间计算函数
      +--------------------------------+
      | addtime('11:15:00','01:01:01') |
      +--------------------------------+
      | 12:16:01                       |
      +--------------------------------+
  mysql> select current_date();                  //当前日期
      +----------------+
      | current_date() |
      +----------------+
      | 2020-01-09     |
      +----------------+
  mysql> select current_time();//当前时间
      +----------------+
      | current_time() |
      +----------------+
      | 14:09:23       |
      +----------------+
  select current_timestamp();//当前日期+时间
      +---------------------+
      | current_timestamp() |
      +---------------------+
      | 2020-01-09 14:09:55 |
      +---------------------+
   //通过时间获取日期部分
   mysql> select date(current_timestamp());
      +---------------------------+
      | date(current_timestamp()) |
      +---------------------------+
      | 2020-01-09                |
      +---------------------------+
   mysql>  select now();
      +---------------------+
      | now()               |
      +---------------------+
      | 2020-01-09 14:10:25 |
      +---------------------+
  //获取年月日等单独信息
    mysql> select year(now());
      +-------------+
      | year(now()) |
      +-------------+
      |        2020 |
      +-------------+

  select charset('张三');        //获取编码格式
  select concat('','')          //连接字符串
  select ucase('');	            //转大写
  select lcase('');             //转小写
  select replace('asc','s','b');//替换
  select strcmp('aaa','bbb');   //逐字节比较字符串大小

======================其他函数================================


========================数据库文件的备份和恢复===============================
  //导出
  mysqldump -h localhost -p3306 -uroot -p123456 test > d:\mydb.sql --default-character-set=gbk
  //导入
  //(先使用数据库 use database 库名)
  mysql> use mydb;
  mysql> source d:/mydb.sql

  //先创建mydb6数据库名
  mysql -u root -p test<d:/mydb.sql
========================数据库文件的备份和恢复===============================








